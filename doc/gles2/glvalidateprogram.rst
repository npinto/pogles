:func:`~pogles.gles2.glValidateProgram`
=======================================

.. function:: pogles.gles2.glValidateProgram(program)

    Validate a program object.

    :param program: is the program object to be validated.
    :type program: int
    :raises: :exc:`~pogles.gles2.GLException`


Description
-----------

:func:`~pogles.gles2.glValidateProgram` checks to see whether the executables
contained in *program* can execute given the current OpenGL state.  The
information generated by the validation process will be stored in program's
information log.  The validation information may consist of an empty string, or
it may be a string containing information about how the current program object
interacts with the rest of current OpenGL state.  This provides a way for
OpenGL implementers to convey more information about why the current program is
inefficient, suboptimal, failing to execute, and so on.

The status of the validation operation will be stored as part of the program
object's state.  This value will be set to ``True`` if the validation succeeded
and ``False`` otherwise.  It can be queried by calling
:func:`~pogles.gles2.glGetProgramiv` with arguments *program* and
:data:`~pogles.gles2.GL_VALIDATE_STATUS`.  If validation is successful,
*program* is guaranteed to execute given the current state.  Otherwise,
*program* is guaranteed to not execute.

This function is typically useful only during application development.  The
informational string stored in the information log is completely implementation
dependent; therefore, an application should not expect different OpenGL
implementations to produce identical information strings.


Notes
-----

This function mimics the validation operation that OpenGL implementations must
perform when rendering commands are issued while programmable shaders are part
of current state.  The error :data:`~pogles.gles2.GL_INVALID_OPERATION` will be
generated by :func:`~pogles.gles2.glDrawArrays` or
:func:`~pogles.gles2.glDrawElements` if any two active samplers in the current
program object are of different types, but refer to the same texture image
unit.

It may be difficult or cause a performance degradation for applications to
catch these errors when rendering commands are issued.  Therefore, applications
are advised to make calls to :func:`~pogles.gles2.glValidateProgram` to detect
these issues during application development.
